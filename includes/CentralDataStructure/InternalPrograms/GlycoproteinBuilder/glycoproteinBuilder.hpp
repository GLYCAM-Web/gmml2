#ifndef INCLUDES_CENTRALDATASTRUCTURE_INTERNALPROGRAMS_GLYCOPROTEINBUILDER_GLYCOPROTEINBUILDER_HPP
#define INCLUDES_CENTRALDATASTRUCTURE_INTERNALPROGRAMS_GLYCOPROTEINBUILDER_GLYCOPROTEINBUILDER_HPP

#include "includes/CentralDataStructure/InternalPrograms/GlycoproteinBuilder/glycosylationSite.hpp"
#include "includes/CentralDataStructure/InternalPrograms/GlycoproteinBuilder/gpInputStructs.hpp"
#include "includes/CentralDataStructure/InternalPrograms/GlycoproteinBuilder/glycoproteinOverlapResolution.hpp"
#include "includes/CentralDataStructure/Readers/Pdb/pdbPreprocessorInputs.hpp"
#include "includes/CentralDataStructure/Geometry/overlap.hpp"
#include <string>

using cds::Assembly;

class GlycoproteinBuilder
{
  public:
    //////////////////////////////////////////////////////////
    //                       CONSTRUCTOR                    //
    //////////////////////////////////////////////////////////
    GlycoproteinBuilder(glycoprotein::GlycoproteinBuilderInputs inputStruct,
                        pdb::PreprocessorOptions preprocessingOptions = pdb::PreprocessorOptions());

    //////////////////////////////////////////////////////////
    //                       ACCESSOR                       //
    //////////////////////////////////////////////////////////
    inline Assembly* getGlycoprotein()
    {
        return &glycoprotein_;
    }

    //////////////////////////////////////////////////////////
    //                       MUTATOR                        //
    //////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////
    //                       FUNCTIONS                      //
    //////////////////////////////////////////////////////////
    void ResolveOverlaps();
    void WritePdbFile(const std::string prefix = "glycoprotein", const bool writeConectSection = true);
    void WriteOffFile(const std::string prefix = "glycoprotein");
    // void WriteOutputFiles(std::string prefix = "Glycoprotein_All_Resolved");
    void PrintDihedralAnglesAndOverlapOfGlycosites();

  private:
    //////////////////////////////////////////////////////////
    //                  PRIVATE ACCESSORS                   //
    //////////////////////////////////////////////////////////
    inline std::vector<GlycosylationSite>& GetGlycosites()
    {
        return glycosites_;
    }

    //////////////////////////////////////////////////////////
    //                  PRIVATE MUTATORS                    //
    //////////////////////////////////////////////////////////

    inline void SetProteinPDBFileName(const std::string s)
    {
        proteinPDBFileName_ = s;
    }

    //////////////////////////////////////////////////////////
    //                  PRIVATE FUNCTIONS                   //
    //////////////////////////////////////////////////////////
    // Class instantiation
    void CreateGlycosites(const std::vector<glycoprotein::GlycositeInput> glycositesInputVector);
    Residue* SelectResidueFromInput(const std::string userSelection);
    //////////////////////////////////////////////////////////
    //                       ATTRIBUTES                     //
    //////////////////////////////////////////////////////////
    std::vector<GlycosylationSite> glycosites_; // Info about each glycosylation site. See the class.
    std::vector<Residue*> proteinResidues_;
    Assembly glycoprotein_; // Generated by this code.
    std::vector<OverlapResidues> overlapResidues_;
    std::string proteinPDBFileName_; // The protein pdb file to attach the glycans to.
    glycoprotein::GlycoproteinBuilderInputs settings;
};

#endif
